// Code generated by MockGen. DO NOT EDIT.
// Source: issue.go

// Package github is a generated GoMock package.
package github

import (
	context "context"
	reflect "reflect"

	object "github.com/go-git/go-git/v5/plumbing/object"
	gomock "github.com/golang/mock/gomock"
	github "github.com/google/go-github/v47/github"
)

// MockIssueHelper is a mock of IssueHelper interface.
type MockIssueHelper struct {
	ctrl     *gomock.Controller
	recorder *MockIssueHelperMockRecorder
}

// MockIssueHelperMockRecorder is the mock recorder for MockIssueHelper.
type MockIssueHelperMockRecorder struct {
	mock *MockIssueHelper
}

// NewMockIssueHelper creates a new mock instance.
func NewMockIssueHelper(ctrl *gomock.Controller) *MockIssueHelper {
	mock := &MockIssueHelper{ctrl: ctrl}
	mock.recorder = &MockIssueHelperMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIssueHelper) EXPECT() *MockIssueHelperMockRecorder {
	return m.recorder
}

// Assign mocks base method.
func (m *MockIssueHelper) Assign(ctx context.Context, issue *github.Issue, usersLogin ...string) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, issue}
	for _, a := range usersLogin {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Assign", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Assign indicates an expected call of Assign.
func (mr *MockIssueHelperMockRecorder) Assign(ctx, issue interface{}, usersLogin ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, issue}, usersLogin...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Assign", reflect.TypeOf((*MockIssueHelper)(nil).Assign), varargs...)
}

// Comment mocks base method.
func (m *MockIssueHelper) Comment(ctx context.Context, issue *github.Issue, comment string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Comment", ctx, issue, comment)
	ret0, _ := ret[0].(error)
	return ret0
}

// Comment indicates an expected call of Comment.
func (mr *MockIssueHelperMockRecorder) Comment(ctx, issue, comment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Comment", reflect.TypeOf((*MockIssueHelper)(nil).Comment), ctx, issue, comment)
}

// Create mocks base method.
func (m *MockIssueHelper) Create(ctx context.Context, err error, upstreamURL string, commit *object.Commit) (*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, err, upstreamURL, commit)
	ret0, _ := ret[0].(*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockIssueHelperMockRecorder) Create(ctx, err, upstreamURL, commit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockIssueHelper)(nil).Create), ctx, err, upstreamURL, commit)
}

// ListAllOpen mocks base method.
func (m *MockIssueHelper) ListAllOpen(ctx context.Context, includePRs bool) ([]*github.Issue, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllOpen", ctx, includePRs)
	ret0, _ := ret[0].([]*github.Issue)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAllOpen indicates an expected call of ListAllOpen.
func (mr *MockIssueHelperMockRecorder) ListAllOpen(ctx, includePRs interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllOpen", reflect.TypeOf((*MockIssueHelper)(nil).ListAllOpen), ctx, includePRs)
}
